// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/blazee5/finance-tracker/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserDAO is an autogenerated mock type for the UserDAO type
type UserDAO struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserDAO) Create(ctx context.Context, user models.User) (interface{}, error) {
	ret := _m.Called(ctx, user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (interface{}, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) interface{}); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, email, password
func (_m *UserDAO) GetUser(ctx context.Context, email string, password string) (models.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserDAO creates a new instance of UserDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserDAO {
	mock := &UserDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
